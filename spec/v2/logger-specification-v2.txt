Logger specification.
=====================

version 2
---------

Logger must be binary (not a script), writen on C-language.

Logger must have just one binary. I.e. not logger.sh, insert-datetime.sh and tag-filter.sh but just logger (logger.exe for Windows).

Logger configuration
--------------------
... (см. файл config.json)

...многопоточность...

Также мы должны предусмотреть опцию логов "binary" для хранения бинарных логов (таких, например, как полученный пакет данных в сыром виде). При этом бинарные файлы обязательно пишутся в отдельные файлы (проверка призводится на этапе разбора файла конфигурации логера). Тут подвох - а какой размер буфера использовать? Тут надо использовать статистику - подбирать такой размер кэша, который записывается с наибольшей скоростью (подбирается отдельно для каждой директории (группы логов по конфигурации)).

Все логи - и текстовыйе, и бинарные - склеиваются в один монолитный массив данных. Причём этот массив данных разбивается на множество фрагментов. Для того, чтобы ориентироваться, где находятся логи нужного времени, ведётся файл индекса <baseFileName>.index. Файл индекса текстовый, имеет следующий формат:
```
lastChangeIndex=4
begin_1=2021-12-01:08:15:31:321
begin_2=2021-12-03:08:15:31:321
....
begin_219=2021-12-05:14:02:04:734
```
Текстовые файлы логов имеют следующий формат:
```
2021-12-01:08:15:31:321 debug MyComponent1 15 Some text here
2021-12-01:08:15:32:021 info dataChanges Some data changed
2021-12-01:08:15:33:021 info dataChanges Multiline log example
...
```
Бинарные файлы логов имеют следующий формат:
```
2021-12-01:08:15:31:321 debug MyComponent1 1024 *&%*&^%*&%*&^%*&%*&^%&^%*&^%
```
После указания даты-времени указывается список тэгов, затем указывается длина логируемой строки (в байтах), далее через один пробел следует само логируемое сообщение (текстовое или бинарное). 

Отличие бинарных логов от текстовых заключается лишь в том, что они защищены от вывода на экран, и выводятся из программы не через стандартный поток вывода, а через отдельный файловый дексриптор, получаемый от логера через переменную окружения.

Ожидаемое поведение от программы, чьи логи мы записываем (требуемое)
----------------------------------------------------------------------
Программа пишет в стандарный поток вывода список тэгов, разделённый пробелами, размер данных в байтах и сами данные(текстовую строку).
Для логирования бинарных данных Программа считывает из переменной окружения, указанной в конфигурации логера, файловый дескриптор (число), в который логер ожидает записи со стороны Программы. boris here

Буферизация
------------
Все новые поступающие собщения пишутся в очередь сообщений на запись (буфер на запись). В отдельном потоке, как только появляется сообщение в очереди, сообщение разбирается, в него вписывается временная отметка и сообщение тут же записывается на диск (вместе со всеми сообщениями, которые успели накопиться в очереди). Те сообщения, которые надо вывести на экран, поступают в очередь сообщений на отображение.
Буфер очереди на запись - 1 МБ.

Вывод на экран
---------------
По красоте, наверное, было бы лучше сделать возможность динамической фильтрации, а также отмотки истории (стрелки вверх-вниз, листание экранами), переход к просмотру выбранного временного отрезка, поиск... А ну в топку это всё! В этой версии спецификации ничего такого не предполагается (и в перспективе тоже) - достаточно возможности выгрузки логов на внешний носитель, а логи с флешки можно открыть уже на отдельном просмотрщике логов с графическим интерфейсом.
Логи, выводимые на экран, выводятся на экран. Тупо.

Состав проекта
---------------
Проект состоит из следующих компонентов:
- программа logger. Внешний логер. Может как считывать логи из стандартноо ввода, так и самостоятельно запускать нужную программу.
- демон loggerd. Отслеживает вставку-изъятие флешек, выполняет команды с этих флешек.
- у логера должно быть состояние: состояние заполненности (при сливании на флешку это состояние может сбрасываться), разрешение на работы с флешками (это даёт Программа, если указан флаг в конфигурации логера, что для работы флешек требуется особое разрешение со стороны Программы).
- программа с графическим интерфейсом для работы с логами: регистрация, разрегистрация флешек, чтение логов (с фильтрацией, навигацией по времени и поиском). Позволяет записать на флешку команду на получение логов за определённый отрезок времени, получение всех имеющихся логов, сброс состояния заполненности логов, а также включения (на время воткнутости флешки) логов на экран. Команды исполняются по очереди. Если какая-то команда не смогла выполниться (из-за ошибок), следующие не выполняются. Флешка имеет тип:
- исполнитель одноразовых команд (флешка универсальная, но каждый раз эти команды надо выставлять)
- исполнитель предустановленных команд. Например, при вставке в машину на объекте туда сливаются все логи и сбрасывается наполненность хранилища логов, а при вставке в машину с Админской программой логи выгружаются. Или при вставке в машину на объекте записывается состояние наполненности, а при вставке в админскую машину в окне запущенного админского приложения отображается выгруженная ранее информация о машине на объекте.
- также должна быть предусмотрена работа логера (и демона) не с флешками, а с запросами по сети (сетевых карт может быть несколько). Тоже должен быть флаг в конфигурации логера, требуется ли подтверждение команд со стороны Программы.

В файле конфигурации логера можно задать ключи, флешки с которыми могут работать с данным логером.




Архивирование - поточное. Т.е. кэш в себе содержит уже сжатые данные.

Передача-сбор логов по сети в данной версии спецификации не предполагается.

Запрос логов
-------------
У нас логи по отдельным тэгам могут писаться в разные директории, в разные файлы. Это не удобно читать. А разбивать вывод логов по директориям имеет смысл ввиду разных временных периодов логов с разными тэгами (например, информация  старте-пуске программы, логи деййствий пользователя и логи отладочного характера должны иметь разные периодв ротации, но при просмотре должны быть в одном месте).

Поэтому вместе с логером в комплекте должна идти утилита для просмотра логов (склейка на ходу). Причём просмотр логов может производиться как на самом объекте, где эти логи пишутся, так и на другой машине по логам, скопированным с машины на объекте.

Слив логов на внешний носитель было бы неплохо автоматизировать (приходит человек, втыкает специально подготовленную флэшку, ждёт уведомления об окончании слива логов, вынимает флэшку). Но в данной версии спецификации ничего такого не предполагается.

Тестирование
--------------
1. Создание директорий из конфигурационного файла, верификация конфигурационного файла
2. Создать пучок потоков и логировать из них одновременно разными способами. Необходимо сформировать обёртки логера для C и C++. Логер должен быть местом записи, общим на всю программу: пока идёт запись из одного потока, запись логов из других потоков блокируется, но запись логов должна быть быстрой (без задержек на запись файла на диск или отправку по сети). Особое обстоятельсво: у нас бинарные логи пишутся по отдельному файловому дескриптору, но бинарные логи у нас и не пишутся в одни файлы с текстовыми логами. Чтобы не задерживать основную программу, логи кэшуруются, а при наполнении кэша запись производится из отдельного потока.


version 3 (for futher)
----------------------
There must be log view utilities:
- select logs for selected datetime interval *
- view logs (with GUI, based on Qt or Traliva)
________________
* utility for autostart on USB-flash (with special marking) inserted. There must be also following functions: display disk utility, trap logs to flash.

